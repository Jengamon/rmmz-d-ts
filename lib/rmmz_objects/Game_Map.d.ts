/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import { Game_Interpreter } from '.';
import { RPG } from '..';
import VehicleType from './models/VehicleType';

declare class Game_Map {
  protected _interpreter: Game_Interpreter;
  protected _mapId: number;
  protected _tilesetId: number;
  protected _tileEvents: RPG.Event[];
  protected _events: RPG.Event[];
  protected _commonEvents: RPG.DataCommonEvent[];
  protected _vehicles: RPG.Vehicle[];
  protected _displayX: number;
  protected _displayY: number;
  protected _nameDisplay: boolean;
  protected _scrollDirection: number;
  protected _scrollRest: number;
  protected _scrollSpeed: number;
  protected _parallaxName: string;
  protected _parallaxZero: boolean;
  protected _parallaxLoopX: boolean;
  protected _parallaxLoopY: boolean;
  protected _parallaxSx: number;
  protected _parallaxSy: number;
  protected _parallaxX: number;
  protected _parallaxY: number;
  protected _battleback1Name: string | null;
  protected _battleback2Name: string | null;

  constructor();

  public initialize(): void;
  public setup(mapId: number): void;
  public isEventRunning(): boolean;
  public tileWidth(): number;
  public tileHeight(): number;
  public mapId(): number;
  public tilesetId(): number;
  public displayX(): number;
  public displayY(): number;
  public parallaxName(): string;
  public battleback1Name(): string | null;
  public battleback2Name(): string | null;
  public requestRefresh(): void;
  public isNameDisplayEnabled(): boolean;
  public disableNameDisplay(): void;
  public enableNameDisplay(): void;
  public createVehicles(): void;
  public refereshVehicles(): void;
  public vehicles(): RPG.Vehicle[];
  public vehicle(vehicleType: VehicleType): RPG.Vehicle;
  public boat(): RPG.Vehicle;
  public ship(): RPG.Vehicle;
  public airship(): RPG.Vehicle;
  public setupEvents(): void;
  public events(): RPG.Event[];
  public event(eventId: number): RPG.Event;
  public eraseEvent(eventId: number): void;
  public autorunCommonEvents(): RPG.DataCommonEvent[];
  public parallelCommonEvents(): RPG.DataCommonEvent[];
  public setupScroll(): void;
  public setupParallax(): void;
  public setupBattleback(): void;
  public setDisplayPos(x: number, y: number): void;
  public parallaxOx(): number;
  public parallaxOy(): number;
  public tileset(): RPG.DataTileset;
  public tilesetFlags(): number[];
  public displayName(): string;
  public width(): number;
  public height(): number;
  public data(): number[];
  public isLoopHorizontal(): boolean;
  public isLoopVertical(): boolean;
  public isDashDisabled(): boolean;
  public encounterList(): unknown[];
  public encounterStep(): number;
  public isOverworld(): boolean;
  public screenTileX(): number;
  public screenTileY(): number;
  public adjustX(x: number): number;
  public adjustY(y: number): number;
  public roundX(x: number): number;
  public roundY(y: number): number;
  public xWithDirection(x: number, direction: number): number;
  public yWithDirection(y: number, direction: number): number;
  public roundXWithDirection(x: number, direction: number): number;
  public roundYWithDirection(y: number, direction: number): number;
  public deltaX(x1: number, x2: number): number;
  public deltaY(y1: number, y2: number): number;
  public distance(x1: number, y1: number, x2: number, y2: number): number;
  public canvasToMapX(x: number): number;
  public canvasToMapY(y: number): number;
  public autoplay(): void;
  public refreshIfNeeded(): void;
  public refresh(): void;
  public refreshTileEvents(): void;
  public eventsXy(x: number, y: number): RPG.Event[];
  public eventsXyNt(x: number, y: number): RPG.Event[];
  public tileEventsXy(x: number, y: number): RPG.Event[];
  public eventIdXy(x: number, y: number): number;
  public scrollDown(distance: number): void;
  public scrollLeft(distance: number): void;
  public scrollRight(distance: number): void;
  public scrollUp(distance: number): void;
  public isValid(x: number, y: number): boolean;
  public checkPassage(x: number, y: number, bit: any): boolean;
  public tileId(x: number, y: number, z: number): number;
  public layeredTiles(x: number, y: number): number[];
  public allTiles(x: number, y: number): number[];
  public autotileType(x: number, y: number, z: number): boolean;
  public isPassable(x: number, y: number, direction: number): boolean;
  public isBoatPassable(x: number, y: number): boolean;
  public isShipPassable(x: number, y: number): boolean;
  public isAirshipLandOk(x: number, y: number): boolean;
  public checkLayeredTilesFlags(x: number, y: number, bit: any): boolean;
  public isLadder(x: number, y: number): boolean;
  public isBush(x: number, y: number): boolean;
  public isCounter(x: number, y: number): boolean;
  public isDamageFloor(x: number, y: number): boolean;
  public terrainTag(x: number, y: number): number;
  public regionId(x: number, y: number): number;
  public startScroll(direction: number, distance: number, speed: number): void;
  public isScrolling(): boolean;
  public update(isSceneActive: boolean): void;
  public updateScroll(): void;
  public scrollDistance(): number;
  public doScroll(direction: number, distance: number): void;
  public updateEvents(): void;
  public updateVehicles(): void;
  public updateParallax(): void;
  public changeTileset(tilesetId: number): void;
  public changeBattleback(battleback1Name: string, battleback2Name: string): void;
  public changeParallax(
    name: string,
    loopX: boolean,
    loopY: boolean,
    sx: number,
    sy: number): void;
  public updateInterpreter(): void;
  public unlockEvent(eventId: number): void;
  public setupStartingEvent(): boolean;
  public setupTestEvent(): boolean;
  public setupStartingMapEvent(): boolean;
  public setupAutorunCommonEvent(): boolean;
  public isAnyEventStarting(): boolean;
}

export { Game_Map };